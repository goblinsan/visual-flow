import type { NodeSpec, RootSpec, StackNode, GridNode, TextNode, BoxNode, ImageNode, IconNode, BadgeNode, ProgressNode } from "../dsl.ts";

function escapeLuaString(s: string) {
  return s
    .replace(/\\/g, "\\\\")
    .replace(/\n/g, "\\n")
    .replace(/\r/g, "")
  .replace(/"/g, '\\"');
}

function nodeToLua(node: NodeSpec): string {
  switch (node.type) {
    case "stack": {
      const s = node as StackNode;
      const children = s.children.map((c) => nodeToLua(c)).join(",\n");
      return `{
  class = "UIListLayout",
  props = { FillDirection = "${s.direction === "horizontal" ? "Horizontal" : "Vertical"}", Padding = ${s.gap ?? 0} },
  children = { ${children} }
}`;
    }
    case "grid": {
      const g = node as GridNode;
      const children = g.children.map((c) => nodeToLua(c)).join(",\n");
      return `{
  class = "UIGridLayout",
  props = { CellPadding = ${g.gap ?? 0}, CellSize = { X = 0, Y = 0 }, Columns = ${g.columns} },
  children = { ${children} }
}`;
    }
    case "box": {
      const b = node as BoxNode;
      const children = b.children.map((c) => nodeToLua(c)).join(",\n");
      return `{
  class = "Frame",
  props = { Padding = ${b.padding ?? 0} },
  children = { ${children} }
}`;
    }
    case "text": {
      const t = node as TextNode;
      return `{
  class = "TextLabel",
  props = { Text = "${escapeLuaString(t.text)}", TextWrapped = true }
}`;
    }
    case "image": {
      const i = node as ImageNode;
      return `{
  class = "ImageLabel",
  props = { Image = "${escapeLuaString(i.src)}" }
}`;
    }
    case "icon": {
      const ic = node as IconNode;
      return `{
  class = "TextLabel",
  props = { Text = "${escapeLuaString(ic.emoji ?? "")}" }
}`;
    }
    case "badge": {
      const b = node as BadgeNode;
      return `{
  class = "TextLabel",
  props = { Text = "${escapeLuaString(b.text)}" }
}`;
    }
    case "progress": {
      const p = node as ProgressNode;
      return `{
  class = "Frame",
  props = { Name = "Progress", Value = ${p.value ?? 0} }
}`;
    }
    default:
      return `{ class = "Frame" }`;
  }
}

export function exportRobloxLua(spec: RootSpec): string {
  const root = nodeToLua(spec.body);
  return `-- Roblox GUI generated by visual-flow\nreturn ${root}\n`;
}

// Placeholder for potential rbxmx XML export (non-trivial to do fully)
export function exportRobloxRbxmx(spec: RootSpec): string {
  const lua = exportRobloxLua(spec);
  return `<!-- rbxmx placeholder wrapping Lua for now -->\n<roblox>\n  <Comment>${lua.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")}</Comment>\n</roblox>`;
}
